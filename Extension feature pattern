import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
from matplotlib.ticker import LinearLocator
from scipy import integrate, signal
import timeit



# -------- Parameters --------

# General parameters
gran = 100      # Granularity (nm)
pixel_size = gran/1000  # Convert to um

# Scattering parameters
beta = 6        # um, long range scattering
eta = 0.5       # dimensionless
gamma = 8.01    # nm
sigma = 2.60    # dimensionless
nu = 18.3       # nm



# -------- PSFs --------

# 2d coordinates for PSFs - from -beta to +beta (can increase but will slow down runtime)
# There's definitely a better way to do this...
lb = - 2 * round(beta)
ub = 2 * round(beta) + pixel_size
x = np.arange(lb, ub, pixel_size)
y = np.arange(lb, ub, pixel_size)
mesh = np.meshgrid(x, y)
r = np.sqrt(np.abs(mesh[0])**2 + np.abs(mesh[1])**2)

# Normalised PSFs
# Each array value corresponds to 100nm
PSF_lr = 1/(np.pi*(1+eta)) * eta/(beta**2) * np.exp(-np.abs(r)**2/beta**2)
PSF_lr = PSF_lr / np.linalg.norm(PSF_lr)
PSF_pl = 1/(np.pi*(1+eta)) * (nu**(-2)/(1 + (np.abs(r)/gamma)**sigma) \
                           + eta/(beta**2) * np.exp(-np.abs((r)**2)/beta**2))
PSF_pl = PSF_pl / np.linalg.norm(PSF_pl)
PSFs = np.array([PSF_lr, PSF_pl])



# -------- Properties of substrate --------

# 2d coordinates for substrate
subs_width = 50  # substrate width (um)
LB = 0
UB = subs_width + pixel_size
X = np.arange(LB, UB, pixel_size)
Y = np.arange(LB, UB, pixel_size)
Mesh = np.meshgrid(X, Y)

# Desired exposure pattern
D_0 = np.zeros((np.size(X), np.size(Y)))
startend = np.array([[[0, 1], [20, 30]],# Start/end points of desired features (um)
                     [[4, 5], [20, 30]],
                     [[9, 10], [20, 30]],
                     [[14, 15], [20, 30]],
                     [[19, 20], [20, 30]],
                     [[24, 25], [20, 30]],
                     [[29, 30], [20, 30]],
                     [[34, 35], [20, 30]],
                     [[39, 40], [20, 30]],
                     [[44, 45], [20, 30]],
                     [[49, 50], [20, 30]]])
for i, j in startend:
    D_0[int(i[0]/pixel_size) : int(i[1]/pixel_size), int(j[0]/pixel_size) : int(j[1]/pixel_size)] = 1



# %% Plots

# -------- Plot PSFs --------
fig, axs = plt.subplots(1, 2, figsize=(12,6), subplot_kw={"projection": "3d"})
surf = axs[0].plot_surface(mesh[0], mesh[1], PSF_lr, cmap=cm.coolwarm,
                           linewidth=0, antialiased=False)
surf = axs[1].plot_surface(mesh[0], mesh[1], PSF_pl, cmap=cm.coolwarm,
                           linewidth=0, antialiased=False)
    #axs.zaxis.set_major_locator(LinearLocator(10))
    #axs.zaxis.set_major_formatter('{x:.02f}')
    #fig.colorbar(surf, shrink=0.5, aspect=5)
axs[0].set_title('Long-range Gaussian only')
axs[1].set_title('Power law + long-range Gaussian')


# -------- Plot desired exposure dose --------
fig, ax = plt.subplots(figsize=(8,6), subplot_kw={"projection": "3d"})
surf = ax.plot_surface(Mesh[0], Mesh[1], D_0, cmap=cm.coolwarm,
                       linewidth=0, antialiased=False)



# -------- Plot corrected exposure dose --------
fig, ax1 = plt.subplots(1, 2, figsize=(12,6), subplot_kw={"projection": "3d"})


# Long-range PSF
D_i = D_0
one = np.ones(np.shape(D_0))

for i in range(2):
     tic = timeit.default_timer()
     cnv = signal.convolve2d(D_i, PSF_lr, mode='same')/100
     toc = timeit.default_timer()
     print('Time to calculate convolution: ', toc-tic)
     D_iplus1 = 2*D_0*(1-cnv) + cnv
     D_i = D_iplus1  / np.max(D_iplus1)  # normalise
surf = ax1[0].plot_surface(Mesh[0], Mesh[1], D_i, cmap=cm.coolwarm, linewidth=0, antialiased=False)
    

# Power law PSF
D_i = D_0
for i in range(2):
    tic = timeit.default_timer()
    cnv = signal.convolve2d(D_i, PSF_pl, mode='same')/100
    toc = timeit.default_timer()
    print('Time to calculate convolution: ', toc-tic)
    D_iplus1 = 2*D_0*(1-cnv) + cnv
    D_i = D_iplus1  / np.max(D_iplus1)  # normalise
surf = ax1[1].plot_surface(Mesh[0], Mesh[1], D_i, cmap=cm.coolwarm, linewidth=0, antialiased=False)
